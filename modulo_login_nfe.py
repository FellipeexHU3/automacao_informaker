from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException, NoSuchElementException
import time
import logging
import os
from dotenv import load_dotenv

# Carregar vari√°veis de ambiente
load_dotenv()

# Configurar logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler()
    ]
)

# Constantes das vari√°veis de ambiente
URL_NFE = os.getenv('URL_NFE')
NFE_USUARIO = os.getenv('NFE_USUARIO')
NFE_SENHA = os.getenv('NFE_SENHA')

def fazer_login_nfe():
    """
    Fun√ß√£o principal para fazer login no sistema de NFe
    
    Returns:
        driver: Inst√¢ncia do WebDriver se login bem-sucedido, None caso contr√°rio
    """
    print("üîê FAZENDO LOGIN NO SISTEMA DE NFE")
    print("=" * 50)
    
    # Verificar se vari√°veis de ambiente foram carregadas
    if not all([URL_NFE, NFE_USUARIO, NFE_SENHA]):
        print("‚ùå Vari√°veis de ambiente n√£o configuradas corretamente")
        print("   Verifique o arquivo .env")
        return None
    
    # Inicializar driver
    driver = webdriver.Chrome()
    driver.maximize_window()
    
    try:
        print(f"üåê Acessando sistema de NFe: {URL_NFE}")
        driver.get(URL_NFE)
        
        # Aguardar p√°gina carregar
        time.sleep(2)
        
        # Preencher usu√°rio
        print(f"üë§ Preenchendo usu√°rio: {NFE_USUARIO}")
        usuario_input = WebDriverWait(driver, 10).until(
            EC.presence_of_element_located((By.ID, "txtLogin"))
        )
        usuario_input.clear()
        usuario_input.send_keys(NFE_USUARIO)
        
        # Aguardar teclado virtual carregar
        time.sleep(3)
        
        print("‚å®Ô∏è Teclado virtual detectado - necess√°rio intera√ß√£o manual")
        print("‚ö†Ô∏è Por favor, insira a senha manualmente no teclado virtual")
        print("‚è≥ Aguardando 60 segundos para login manual...")
        
        # Aguardar tempo para inser√ß√£o manual da senha
        time.sleep(60)
        
        # Verificar se login foi bem-sucedido
        try:
            # Verificar se elemento p√≥s-login est√° presente
            WebDriverWait(driver, 10).until(
                EC.presence_of_element_located((By.ID, "ctl00_Conteudo_UpdatePanel1"))
            )
            print("‚úÖ Login realizado com sucesso!")
            return driver
            
        except TimeoutException:
            print("‚ùå Poss√≠vel falha no login - elemento p√≥s-login n√£o encontrado")
            print("‚ö†Ô∏è Verifique se o login foi feito manualmente e continue")
            return driver
            
    except Exception as e:
        print(f"‚ùå Erro durante o login: {str(e)}")
        driver.quit()
        return None

def testar_coordenadas_nfe():
    """
    Fun√ß√£o para testar coordenadas e elementos da p√°gina
    """
    print("üéØ TESTANDO COORDENADAS E ELEMENTOS")
    print("=" * 50)
    
    # Verificar se URL foi carregada
    if not URL_NFE:
        print("‚ùå URL_NFE n√£o configurada no arquivo .env")
        return False
    
    driver = webdriver.Chrome()
    
    try:
        driver.get(URL_NFE)
        time.sleep(3)
        
        print("üìã Elementos encontrados na p√°gina:")
        print("-" * 30)
        
        # Procurar elementos comuns
        elementos_testar = [
            "txtLogin", "txtSenha", "btnLogin", 
            "input[type='button']", "button", "div[onclick]"
        ]
        
        for seletor in elementos_testar:
            try:
                if seletor in ["txtLogin", "txtSenha", "btnLogin"]:
                    elementos = driver.find_elements(By.ID, seletor)
                else:
                    elementos = driver.find_elements(By.CSS_SELECTOR, seletor)
                
                if elementos:
                    print(f"‚úÖ {seletor}: {len(elementos)} elemento(s) encontrado(s)")
                    for i, elemento in enumerate(elementos[:3]):
                        texto = elemento.text or elemento.get_attribute("value") or elemento.get_attribute("innerText")
                        print(f"   {i+1}. Texto: '{texto[:50]}'")
                else:
                    print(f"‚ùå {seletor}: Nenhum elemento encontrado")
                    
            except Exception as e:
                print(f"‚ö†Ô∏è Erro ao buscar {seletor}: {str(e)}")
                
        return True
        
    except Exception as e:
        print(f"‚ùå Erro no teste de coordenadas: {str(e)}")
        return False
    finally:
        driver.quit()